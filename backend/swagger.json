{
  "swagger": "2.0",
  "info": {
    "description": "Quizzahut app API Documentation",
    "version": "1.0.0",
    "title": "Quizzahut REST API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "tutorial@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "127.0.0.1:3005",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API to manage users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Get all users from the system",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "Create a new user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Get a user by their ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user by ID",
        "description": "Update a user by their ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user by ID",
        "description": "Delete a user by their ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/subjects": {
      "post": {
        "tags": [
          "Subjects"
        ],
        "summary": "Create a Subject",
        "description": "Create a new subject",
        "operationId": "createSubject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Subject created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": [
          "Subjects"
        ],
        "summary": "Get all Subjects",
        "description": "Get a list of all subjects",
        "operationId": "getAllSubjects",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subject"
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    }, 
    "/subjects/{id}": {
        "get": {
          "tags": [
            "Subjects"
          ],
          "summary": "Get a Subject by ID",
          "description": "Get a subject by its ID",
          "operationId": "getSubjectById",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the subject to retrieve",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "Subject found",
              "schema": {
                "$ref": "#/definitions/Subject"
              }
            },
            "404": {
              "description": "Subject not found"
            }
          }
        },
        "put": {
          "tags": [
            "Subjects"
          ],
          "summary": "Update a Subject",
          "description": "Update a subject by its ID",
          "operationId": "updateSubject",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the subject to update",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Subject object that needs to be updated",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Subject"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Subject updated successfully"
            },
            "404": {
              "description": "Subject not found"
            }
          }
        },
        "delete": {
          "tags": [
            "Subjects"
          ],
          "summary": "Delete a Subject",
          "description": "Delete a subject by its ID",
          "operationId": "deleteSubject",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the subject to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "204": {
              "description": "Subject deleted successfully"
            },
            "404": {
              "description": "Subject not found"
            }
          }
        }
      }
  },
    "definitions": {
      "User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "role": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "college": {
            "type": "string"
          },
          "university": {
            "type": "string"
          },
          "passout_year": {
            "type": "integer"
          },
          "current_year": {
            "type": "integer"
          },
          "city": {
            "type": "string"
          }
        }
      },
      "Subject": {
        "type": "object",
        "properties": {
          "subject_id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "added_at": {
            "type": "string",
            "format": "date-time"
          },
          "added_by": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key reference to user_id"
          },
          "subject_description": {
            "type": "string"
          }
        }
      },
      "Quiz": {
        "type": "object",
        "properties": {
          "quiz_id": {
            "type": "integer",
            "format": "int64"
          },
          "created _by": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "text"
          },
          "time": {
            "type": "integer"
          },
          "karma": {
            "type": "integer"
          },
          "subject_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key ref to subject_id"
          }
        }
      },
      "Question": {
        "type": "object",
        "properties": {
          "question_id": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string"
          },
          "image_url": {
            "type": "string",
            "maxLength": 255
          },
          "code": {
            "type": "string"
          },
          "options": {
            "type": "string"
          },
          "correct_option": {
            "type": "string",
            "maxLength": 10
          },
          "subject_id": {
            "type": "integer"
          },
          "karma": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "quiz_id": {
            "type": "integer"
          }
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "review_id": {
            "type": "integer",
            "format": "int64"
          },
          "quiz_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key ref to quiz_id"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key ref to user_id"
          },
          "karma": {
            "type": "integer"
          }
        }
      }

    },
    "securityDefinitions": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }

}
  